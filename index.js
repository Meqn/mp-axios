/*!
 * mp-axios v1.2.0
 * Promise based HTTP client for miniprogram.
 * (c) 2021 Mervin [https://github.com/Meqn/mp-request-promise]
 * Released under the MIT License.
*/
function t(t){return"[object Object]"===Object.prototype.toString.call(t)}function e(t,e){return function(...r){return t.apply(e,r)}}function r(t,r,o){for(let s in r)Object.prototype.hasOwnProperty.call(r,s)&&("function"==typeof r[s]?t[s]=e(r[s],o):t[s]=r[s]);return t}function o(e={},r={}){const o={...e,...r};return Object.keys(o).forEach((s=>{const n=o[s];t(n)?o[s]={...e[s],...r[s]}:Array.isArray(n)&&(o[s]=n.slice())})),o}function s(){return{use(t,e){"function"==typeof t&&(this.success=t),"function"==typeof e&&(this.error=e)},success:t=>t,error:t=>t}}function n(t,e){if(!t)return console.error("Request: platform API is not found.");this.API=t,this.defaults=e,this.interceptors={request:s(),response:s()}}Promise.prototype.finally=Promise.prototype.finally||function(t){const e=this.constructor;return this.then((r=>e.resolve(t(r)).then((()=>r))),(r=>e.resolve(t(r)).then((()=>Promise.reject(r)))))},n.prototype.getRequest=function(){},n.prototype.request=function(t){if(!this.API.request)return console.error("Request: request API does not exist.");const e=this.interceptors.response,r=this.interceptors.request;try{return(t=o(this.defaults,t)).method=t.method.toLocaleUpperCase(),new Promise(((o,s)=>{const n={success(t){const r=e.success(t);o(r)},fail(t){const r=e.error(t);s(r)}};t=Object.assign(t,n),t=r.success(t),this.API.request(t)}))}catch(t){return r.error(t)}},["get","post","put","delete","options","head","trace","connect"].forEach((e=>{n.prototype[e]=function(r,s,n={}){return n=t(r)?o(r,{method:e}):o(n,{method:e,url:r,data:s}),this.request(n)}}));const c=function t(s,c={}){const u=new n(s,c),i=e(n.prototype.request,u);return r(i,n.prototype,u),r(i,u),i.create=(e,r)=>t(e,o(c,r)),i}(wx,{url:"",method:"GET",header:{"content-type":"application/json"},dataType:"json",responseType:"text"});c.Axios=n;export{c as default};
